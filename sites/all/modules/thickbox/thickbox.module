<?php
// $Id: thickbox.module,v 1.9.2.3 2007/06/05 06:29:51 frjo Exp $

/**
 * @file
 * Author: Fredrik Jonsson fredrik at combonet dot se
 * The thickbox module is a simple wrapper for the jquery plugin
 * ThickBox http://jquery.com/demo/thickbox/.
 */

/**
 * Menu callback for admin_settings.
 */
function thickbox_admin_settings() {
  $form['thickbox_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Thickbox options')
  );
  $form['thickbox_options']['thickbox_auto'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable for image nodes'),
    '#default_value' => variable_get('thickbox_auto', 0),
    '#description' => t('Automatically activate Thickbox for all image nodes (requires the image module).'),
  );
  if (module_exists('image')) {
    $options = array('original' => t('original'));
    $sizes = _image_get_sizes();
    foreach ($sizes as $size) {
      $options[$size['label']] = $size['label'];
    }
    $form['thickbox_options']['thickbox_derivative'] = array(
      '#type' => 'select',
      '#title' => t('Image derivative'),
      '#options' => $options,
      '#default_value' => variable_get('thickbox_derivative', 'preview'),
      '#description' => t('Select which image derivative will be loaded.'),
    );
  }
  $form['thickbox_options']['thickbox_login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable for login links'),
    '#default_value' => variable_get('thickbox_login', 0),
    '#description' => t('Automatically activate Thickbox for links to user/login.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function thickbox_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/thickbox',
      'title' => t('Thickbox'),
      'description' => t('Configure Thickbox behavior.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'thickbox_admin_settings',
      'access' => user_access('administer site configuration')
    );
    $items[] = array(
      'path' => 'thickbox_login',
      'title' => t('Login'),
      'callback' => 'thickbox_login',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK
    );
  }
  else {
    if (arg(0) != 'admin' && arg(0) != 'img_assist' && arg(1) != 'add' && arg(2) != 'edit') {
      $path = drupal_get_path('module', 'thickbox');
      drupal_add_css($path .'/thickbox.css');

      global $user;
      if ($user->uid == 0 && variable_get('thickbox_login', 0)) {
        drupal_add_js($path .'/thickbox_login.js');
      }

      if (variable_get('thickbox_auto', 0) && module_exists('image')) {
        drupal_add_js("var thickbox_derivative = ". drupal_to_js(variable_get('thickbox_derivative', 'preview')) .";", 'inline');
        drupal_add_js($path .'/thickbox_auto.js');
      }

      drupal_add_js($path .'/thickbox.js');
    }
  }

  return $items;
}

/**
 * Menu callback for thickbox_login.
 */
function thickbox_login() {
  print drupal_get_form('user_login');
  exit;
}

/**
 * Implementation of hook_form_alter().
 * Reformat the login form.
 */
function thickbox_form_alter($form_id, &$form) {
  if ($form_id == 'user_login' && arg(0) == 'thickbox_login') {
    $form['#action'] = url('user/login', 'destination='. $_GET['destination']);
    $form['name']['#size'] = 25;
    $form['pass']['#size'] = 25;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 * Adds certain thickbox+imagecache formatters to CCK image fields if imagefield.module and imagecache.module exist.
 */
function thickbox_field_formatter_info() {
  $formatter = array();
  if (module_exists('imagefield') && module_exists('imagecache')) {
    $rules = _imagecache_get_presets();
    foreach ($rules as $ruleid => $rulename) {
      $formatters['thickbox]['. $rulename] = array(
        'label' => 'Thickbox: '. $rulename,
        'field types' => array('image'),
        );
    }
  }

  return $formatters;
}

/**
 * Implementation of hook_field_formatter().
 */
function thickbox_field_formatter($field, $item, $formatter) {
  if (module_exists('imagefield') && module_exists('imagecache')) {
    if (empty($item['fid'])) {
      return '';
    }
    $file = _imagefield_file_load($item['fid']);
    if (strpos($formatter, 'thickbox][') !== false) {
      list($null, $namespace) = explode('][', $formatter, 2);
      $rules = _imagecache_get_presets();
      if (in_array($namespace, (array) $rules)) {
        return theme('imagefield_image_imagecache_thickbox', $namespace, $field, $file['filepath'], $item['alt'], $item['title']);
      }
    }
  }
}

/**
 * Implementation of theme_imagefield_image_imagecache_thickbox().
 */
function theme_imagefield_image_imagecache_thickbox($namespace, $field, $path, $alt = '', $title = '', $attributes = NULL) {
  $attributes = drupal_attributes($attributes);
  $imagecache_path = file_create_url(file_directory_path() .'/imagecache/'. $namespace .'/'. $path);
  $image = '<img src="'. $imagecache_path .'" alt="'. check_plain($alt) .'" '. $attributes .' />';

  return l($image, file_create_url($path), array('title' => $title, 'class' => 'thickbox', 'rel' => $field['type_name']), NULL, NULL, FALSE, TRUE);
}
